package com.nwq.code.liferecord.data_base.automatic;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nwq.code.liferecord.data_base.bean.AnchorPointType;
import com.nwq.code.liferecord.data_base.bean.AnchorPointTypeConverter;
import com.nwq.code.liferecord.data_base.bean.ContentType;
import com.nwq.code.liferecord.data_base.bean.ContentTypeConverter;

import com.nwq.code.liferecord.data_base.bean.AnchorPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANCHOR_POINT".
*/
public class AnchorPointDao extends AbstractDao<AnchorPoint, Long> {

    public static final String TABLENAME = "ANCHOR_POINT";

    /**
     * Properties of entity AnchorPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property Comment = new Property(2, String.class, "comment", false, "COMMENT");
        public final static Property Position = new Property(3, int.class, "position", false, "POSITION");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property AnchorPointType = new Property(5, String.class, "anchorPointType", false, "ANCHOR_POINT_TYPE");
        public final static Property ContentType = new Property(6, String.class, "contentType", false, "CONTENT_TYPE");
    }

    private final AnchorPointTypeConverter anchorPointTypeConverter = new AnchorPointTypeConverter();
    private final ContentTypeConverter contentTypeConverter = new ContentTypeConverter();

    public AnchorPointDao(DaoConfig config) {
        super(config);
    }
    
    public AnchorPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANCHOR_POINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TEXT\" TEXT NOT NULL ," + // 1: text
                "\"COMMENT\" TEXT," + // 2: comment
                "\"POSITION\" INTEGER NOT NULL ," + // 3: position
                "\"DATE\" INTEGER," + // 4: date
                "\"ANCHOR_POINT_TYPE\" TEXT," + // 5: anchorPointType
                "\"CONTENT_TYPE\" TEXT);"); // 6: contentType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANCHOR_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AnchorPoint entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getText());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(3, comment);
        }
        stmt.bindLong(4, entity.getPosition());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        AnchorPointType anchorPointType = entity.getAnchorPointType();
        if (anchorPointType != null) {
            stmt.bindString(6, anchorPointTypeConverter.convertToDatabaseValue(anchorPointType));
        }
 
        ContentType contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(7, contentTypeConverter.convertToDatabaseValue(contentType));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AnchorPoint entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getText());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(3, comment);
        }
        stmt.bindLong(4, entity.getPosition());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        AnchorPointType anchorPointType = entity.getAnchorPointType();
        if (anchorPointType != null) {
            stmt.bindString(6, anchorPointTypeConverter.convertToDatabaseValue(anchorPointType));
        }
 
        ContentType contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(7, contentTypeConverter.convertToDatabaseValue(contentType));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public AnchorPoint readEntity(Cursor cursor, int offset) {
        AnchorPoint entity = new AnchorPoint( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // text
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment
            cursor.getInt(offset + 3), // position
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : anchorPointTypeConverter.convertToEntityProperty(cursor.getString(offset + 5)), // anchorPointType
            cursor.isNull(offset + 6) ? null : contentTypeConverter.convertToEntityProperty(cursor.getString(offset + 6)) // contentType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AnchorPoint entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setText(cursor.getString(offset + 1));
        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosition(cursor.getInt(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setAnchorPointType(cursor.isNull(offset + 5) ? null : anchorPointTypeConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setContentType(cursor.isNull(offset + 6) ? null : contentTypeConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AnchorPoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AnchorPoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AnchorPoint entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
