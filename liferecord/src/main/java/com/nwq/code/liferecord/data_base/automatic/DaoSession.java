package com.nwq.code.liferecord.data_base.automatic;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.nwq.code.liferecord.data_base.bean.anchor.AnchorPoint;
import com.nwq.code.liferecord.data_base.bean.anchor.ImportantNode;
import com.nwq.code.liferecord.data_base.bean.anchor.TakeTimeRecord;
import com.nwq.code.liferecord.data_base.bean.fulcrum.FulcrumFactor;
import com.nwq.code.liferecord.data_base.bean.fulcrum.FulcrumItem;
import com.nwq.code.liferecord.data_base.bean.fulcrum.FulcrumType;

import com.nwq.code.liferecord.data_base.automatic.AnchorPointDao;
import com.nwq.code.liferecord.data_base.automatic.ImportantNodeDao;
import com.nwq.code.liferecord.data_base.automatic.TakeTimeRecordDao;
import com.nwq.code.liferecord.data_base.automatic.FulcrumFactorDao;
import com.nwq.code.liferecord.data_base.automatic.FulcrumItemDao;
import com.nwq.code.liferecord.data_base.automatic.FulcrumTypeDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig anchorPointDaoConfig;
    private final DaoConfig importantNodeDaoConfig;
    private final DaoConfig takeTimeRecordDaoConfig;
    private final DaoConfig fulcrumFactorDaoConfig;
    private final DaoConfig fulcrumItemDaoConfig;
    private final DaoConfig fulcrumTypeDaoConfig;

    private final AnchorPointDao anchorPointDao;
    private final ImportantNodeDao importantNodeDao;
    private final TakeTimeRecordDao takeTimeRecordDao;
    private final FulcrumFactorDao fulcrumFactorDao;
    private final FulcrumItemDao fulcrumItemDao;
    private final FulcrumTypeDao fulcrumTypeDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        anchorPointDaoConfig = daoConfigMap.get(AnchorPointDao.class).clone();
        anchorPointDaoConfig.initIdentityScope(type);

        importantNodeDaoConfig = daoConfigMap.get(ImportantNodeDao.class).clone();
        importantNodeDaoConfig.initIdentityScope(type);

        takeTimeRecordDaoConfig = daoConfigMap.get(TakeTimeRecordDao.class).clone();
        takeTimeRecordDaoConfig.initIdentityScope(type);

        fulcrumFactorDaoConfig = daoConfigMap.get(FulcrumFactorDao.class).clone();
        fulcrumFactorDaoConfig.initIdentityScope(type);

        fulcrumItemDaoConfig = daoConfigMap.get(FulcrumItemDao.class).clone();
        fulcrumItemDaoConfig.initIdentityScope(type);

        fulcrumTypeDaoConfig = daoConfigMap.get(FulcrumTypeDao.class).clone();
        fulcrumTypeDaoConfig.initIdentityScope(type);

        anchorPointDao = new AnchorPointDao(anchorPointDaoConfig, this);
        importantNodeDao = new ImportantNodeDao(importantNodeDaoConfig, this);
        takeTimeRecordDao = new TakeTimeRecordDao(takeTimeRecordDaoConfig, this);
        fulcrumFactorDao = new FulcrumFactorDao(fulcrumFactorDaoConfig, this);
        fulcrumItemDao = new FulcrumItemDao(fulcrumItemDaoConfig, this);
        fulcrumTypeDao = new FulcrumTypeDao(fulcrumTypeDaoConfig, this);

        registerDao(AnchorPoint.class, anchorPointDao);
        registerDao(ImportantNode.class, importantNodeDao);
        registerDao(TakeTimeRecord.class, takeTimeRecordDao);
        registerDao(FulcrumFactor.class, fulcrumFactorDao);
        registerDao(FulcrumItem.class, fulcrumItemDao);
        registerDao(FulcrumType.class, fulcrumTypeDao);
    }
    
    public void clear() {
        anchorPointDaoConfig.clearIdentityScope();
        importantNodeDaoConfig.clearIdentityScope();
        takeTimeRecordDaoConfig.clearIdentityScope();
        fulcrumFactorDaoConfig.clearIdentityScope();
        fulcrumItemDaoConfig.clearIdentityScope();
        fulcrumTypeDaoConfig.clearIdentityScope();
    }

    public AnchorPointDao getAnchorPointDao() {
        return anchorPointDao;
    }

    public ImportantNodeDao getImportantNodeDao() {
        return importantNodeDao;
    }

    public TakeTimeRecordDao getTakeTimeRecordDao() {
        return takeTimeRecordDao;
    }

    public FulcrumFactorDao getFulcrumFactorDao() {
        return fulcrumFactorDao;
    }

    public FulcrumItemDao getFulcrumItemDao() {
        return fulcrumItemDao;
    }

    public FulcrumTypeDao getFulcrumTypeDao() {
        return fulcrumTypeDao;
    }

}
